#!/usr/bin/env python
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import logging
import sys
from os import environ
from os.path import dirname, abspath

from fabric.api import local, quiet

# This path hack allows this script to be run from any folder. Otherwise, running it from within
# the bin directory would lead to problems importing modules in the clusterdock package.
sys.path.insert(0, dirname(dirname(abspath(__file__))))

from clusterdock.docker_utils import (kill_all_containers, remove_all_containers,
                                      remove_all_images, remove_all_networks)

logger = logging.getLogger('housekeeping')
logger.setLevel(logging.INFO)

def main():
    parser = argparse.ArgumentParser(description='Perform common Docker housekeeping actions')
    parser.add_argument('action', choices=['nuke', 'remove_all_images'], help='Action to carry out')
    args = parser.parse_args()

    if args.action == 'nuke':
        logger.info('Removing all containers on this host...')
        remove_all_containers()
        logger.info('Successfully removed all containers on this host.')
        logger.info('Removing all user-defined networks on this host...')
        remove_all_networks()
        logger.info('Successfully removed all user-defined networks on this host.')
        with open('/etc/hosts', 'r') as etc_hosts:
            host_lines = etc_hosts.readlines()
        clusterdock_signature = '# Added by clusterdock'
        if any(clusterdock_signature in line for line in host_lines):
            logger.info('Clearing container entries from /etc/hosts...')
            with open('/etc/hosts', 'w') as etc_hosts:
              etc_hosts.writelines([line for line in host_lines if
                                    clusterdock_signature not in line])
            logger.info('Successfully cleared container entries from /etc/hosts.')
        if not environ.get('CLUSTERDOCK'):
            logger.info('Restarting Docker daemon...')
            with quiet():
                local('service docker restart')
        logger.info('Successfully nuked this host.')
    elif args.action == 'remove_all_images':
        logger.info('Removing all images on this host...')
        remove_all_images()
        logger.info('Successfully removed all images.')

if __name__ == '__main__':
    main()
